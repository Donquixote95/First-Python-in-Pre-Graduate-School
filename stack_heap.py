""" 
ㅁPython의 기본 자료형 ; 숫자, 문자열, 불
 ex) a= 10, b = True, c = "안녕하세요"

ㅁPython의 객체 자료형 ; 위 3가지를 제외한 모든 자료형
 ex) d = [1,2,3,4], e = {"이름": "뀨", "나이": 뀨뀨}

ㅁ기본 자료형 ; 가볍고 정형화된 자료이다. 파이썬은 작은 상자에 기본 자료형을 저장하며 이를 쌓아서 모아둔다.

ㅁStack(스택) ; 기본 자료형이 차곡차곡 정리되어 있는 공간

ㅁ객체 자료형 ; 무겁고 크기가 정형화되어 있지 않다. 스택처럼 차곡차곡 쌓아서 정리할 수 없으므로 파이썬은 거대한 창고에 이를 넣어둔다.

ㅁHeap(힙) ; 객체 자료형이 저장되어 있는 거대한 창고

스택에 있는 자료는 잘 정리되어 있어서 쉽고 빠르게 찾을 수 있지만,
힙에 있는 자료는 힙이라는 창고가 너무 크기 때문에 쉽게 찾을 수 없다.

그래서 파이썬은 리스트와 딕셔너리 같이 큰 자료형은 힙이라는 창고에 넣어두고,
창고의 어떤 위치에 저장했는지를 '스택'에 기록한다.

창고에 위치한 선반을 CS에서는 0x01, 0x06과 같은 형태의 '16진수 숫자(hexadecimal)'로 표현한다.
앞에 붙어 있는 '0x'는 '이 숫자는 16진수로 표현한 값이다.'라는 뜻이다.

그래서 스택에는
a 10
b True
c "안녕하세요"
d 0x01
e 0x02

와 같이 표현되고

힙에는
주소 0x01 [1,2,3,4]
주소 0x02 {"이름": "뀨", "나이": 뀨뀨}

와 같이 표현된다.

ㅁAddress(주소), Reference(레퍼런스) ; 힙의 어떤 위치에 저장했는지를 나타내는 것.

"""


"""
파이썬은 함수를 호출할 때 함수 내부 코드를 실행하기 위해 함수 내부의 변수를 저장할 스택을 추가로 만든다.

global space가 아닌 namespace에 local variable을 만든다. 
local variable은 함수가 시작할 때 생기고, 함수가 종료되고 결과값을 return할 때 사라진다.

global stack(전역 스택) ; 가장 외곽에 있는 스택

"""

# Deep Copy ; '실제 값'을 새로운 메모리 공간 복사하는 것
# Shallow Copy ; '주소 값'을 복사한다는 의


# 기본 자료형 복사
def primitive_change(b):
    b = 20

a = 10

print(a)
primitive_change(a)
print(a)

# 객체 자료형 복사
def object_change1(d):
    d.append(4)

c = [1,2,3]

print(c)
object_change1(c)
print(c)

# Difference Survey
def object_change2(f):
    f = [4,5,6]

e = [1,2,3]

print(e)
print(object_change2(e))
print()
object_change2(e)
print(e)

# global keyword
"""
global 키워드의 사용 시기
 1. 함수 내부에서 함수 외부의 변수의 값을 활용한 후
 2. 스택에 있는 값을 교체하려고 할 때

키워드를 사용하지 않으면 'UnboundLocalError'가 발생한다.
"""



# 아래 코드는 함수 외부에 있는 변수 a를 print 함수로 출력한다. 그리고 변수 a 스택에 있는 값을 교체하고 있다.
# 따라서 코드를 실행하면 UnboundLocalError가 발생한다.
"""
a = 10

def 함수():
    print(a)
    a = 20

함수()
""" 

# 다음 코드는 함수 내부에서 함수 외부에 있는 변수 a를 print 함수로 출력한다. 이어서 append() 함수를 사용해서 '힙에 있는 리스트'를 변경한다.
# 스택에 있는 값을 교체하고 있지 않는다.
a = [1,2,3]
def 함수():
    print(a)
    a.append(4)
함수()

# 만약 이전과 같이 a = [4,5,6]과 같은 형태로 스택에 있는 변수 a의 값(주소) 자체를 수정하려고 하면 어떻게 될까?
a = [1,2,3]
def 함수():
    print(a)
    a = [4,5,6]
함수()
# 위 코드는 함수 내부에서 함수 외부에 있는 변수 a를 print 함수로 출력하고, 변수 a의 스택에 있는 값(주소)를 교체한다.
# 따라서 실행하면 UnboundLocalError가 발생한다.
